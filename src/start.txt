npm install -g @vue/cli

vue ui


<a href="yandexnavi://build_route_on_map?lat_to=59.9442543&amp;lon_to=30.5131509">Построить маршрут в Яндекс.Навигатор</a>

npm run serve

npm run build

firebase deploy


sudo npm install -g firebase-tools
firebase login
firebase init
  Hosting: Configure and deploy Firebase Hosting sites
  Use an existing project
  Your public directory is the folder
  Configure as a single-page app (rewrite all urls to /index.html)? (y)
  File public/index.html already exists. Overwrite? No

  Set-ExecutionPolicy RemoteSigned // командная строка компьютера


npm i firebase

npm install firebase-admin --save

https://ru.parceljs.org/

https://www.youtube.com/watch?v=0ViiJ8qTCFM&t=5943s

css
.flex-container {
    display: flex;
    flex-wrap: wrap;
    gap: 1rem;
}
.flex-item {
    flex: 1 1 calc((100% / 3) - 2rem);
}

document.querySelector('#d')
document.getElementById('d')
e.target.parentElement.style.zIndex = '200'

el.textContent
el.innerHTML
el.insertAdjacentHTML('afterbegin', html)
                       'afterbegin': сразу после открывающего тега  el (перед первым потомком).
                       'beforebegin': до самого element (до открывающего тега)
                       'beforeend': сразу перед закрывающим тегом element
                       'afterend': после element (после закрывающего тега)

el.remove() : Удалииз DOM

el.children – только дочерние узлы-элементы, то есть соответствующие тегам.
el.firstElementChild
el.lastElementChild – соответственно, первый и последний дети-элементы.
el.previousElementSibling, nextElementSibling – соседи-элементы.
el.parentElement – родитель-элемент.

el.innerHTML = html
    table.innerHTML = el.outerHTML

isNaN(el)

Math.floor(el) // округление

+el.toFixed(2)


e.target.classList.add
                  .contains  // проверка наличия класса
                  .toggle

el.checked  //checkbox

el.tagName  // название тега
e.target.classList.contains('tableClose') // наличие класса

return [
      block('text'),
      block('title')
    ].join('')

const newBlock = type === 'text'
      ? new TextBlock(value, {styles})
      : new TitleBlock(value, {styles})

$go.setAttribute('disabled', 'true') // button

arr.push(...items) – добавляет элементы в конец,
arr.pop() – извлекает элемент из конца,
arr.shift() – извлекает элемент из начала,
arr.unshift(...items) – добавляет элементы в начало
arr.splice(str) - удаляет элемент из массива

JSON.parse(text) // разбирает строку
JSON.stringify() преобразует значение JavaScript в строку JSON

arr = arr.filter(function (x) {
    return x !== undefined && x !== null         // убирает из массива пустые значения
})

elem.onclick = function
     onchange

element.addEventListener('click', function);
                          change

input.oninput = function() {}  // Событие input срабатывает тут же при изменении значения текстового элемента и поддерживается всеми браузерами, кроме IE8

const tabs = $calc.getElementsByTagName('li')
;[...tabs].forEach((tab) => tab.addEventListener('click', tabClick))

str.split('-') // разбирает строку в массив
str.join(' ') // убирает символы межу словами

str.replace(/ /g, '_') // замена пробела символом
str.replace(/[^a-zа-яё0-9 ]/gi, '_').trim() // замена всех символов кроме букв и цифр

Замена переноса строки на <br>
str.replace(/\\n/g,'<br>') или
str.replace(/\n/g,'<br>')

получить ключи объекта или массива
var obj = { 0: 'a', 1: 'b', 2: 'c' };
console.log(Object.keys(obj)); // консоль: ['0', '1', '2']

return Object.keys(obj).map((key) => ({
    name: obj[key],
    id: key,
}))

получить текст из выбранного селекта
select_selected_text = event.options[event.selectedIndex].text


length

Установка пробеле после тысячи -> 1 2366 р
const summ = new Intl.NumberFormat('ru-RU').format(val) + 'р.'

Фильтер по дате
date_filter(obj){
    let aray = Object.keys(obj).map((key) => ({
        ...obj[key],
        id: key,
    }))

    const date_sort = aray.reduce((result, item) => {
        return result.includes(item.date)
            ? result
            : [...result, item.date]
    }, [])

    date_sort.sort((a, b) => b - a)

    let arr = []

    date_sort.forEach((el) => {
        for (let i in aray) {
            if (el === aray[i].date) arr.push(aray[i])
        }
    })
    return arr
}
Текущий год
(new Date()).getFullYear()

Дата в формате числа
Date.now()

var ms = Date.parse('2012-01-26T13:51:50.417-07:00');

alert( ms ); // 1327611110417 (число миллисекунд)


.......................  vue ........................

ref="textarea"
 setTimeout(() => {
    this.$refs.textarea.select()
    // this.$refs.textarea.focus()
}, 0)

$route.params.id

this.$router.push('/edit/' + id)

 this.$emit('status_change', {
                zakaz_id: event.value,
                status_id: id,
            })

emits: ["status_change"]
            

this.$store.state.statusStore.mail_user

 watch: {
        '$route.hash': {
            handler: function(hash) {
                this.status_hach = hash.includes('user')
                    ? this.BD_STATUS_USER
                    : this.BD_STATUS_ZAVOD
            },
            deep: true,
            immediate: true,
        },
    },


......................... firebase ......................

id - пользователя
const user = firebase.auth().currentUser
return user ? user.uid : null

получение даных
 const ref = await firebase.database().ref(`users/${uid}/info/catalog`)
        ref.on('value', (snapshot) => {
            const data = snapshot.val()


{
  "rules": {
    ".read": "auth != null",
    ".write": "auth != null"
  }
}

{
  "rules": {
    "users": {
      "$uid": {
        ".read": "$uid === auth.uid",
        ".write": "$uid === auth.uid"
      }
    }
  }
}

".read": "auth.uid === 'vfDclvhbAza9XJKEWxueB5oUPV83'",
    ".write": "auth.uid === 'vfDclvhbAza9XJKEWxueB5oUPV83'"

